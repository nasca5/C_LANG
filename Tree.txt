트리 ADT : 트리 자료 구조는 말 그대로 나무를 닮은 자료 구조이다.
나무에는 뿌리가 있고 뿌리에서는 가지가 뻗어 나오며 가지 끝에는 잎이 달린다.
트리 자료 구조는 이러한 나무의 모습을 거꾸로 뒤집어놓은 모습과 같다.

트리 구조는 컴퓨터 과학에서도 활용도가 매우 높다. 
운영 체제의 파일 시스템이 트리 구조로 이루어져 있고, HTML이나 XML 문서를 다룰 때 사용하는
DOM도 트리 구조로 이루어져 있다.
또한 검색 엔진이나 데이터베이스도 트리 구조에 기반해서 구현된다.

* 검색 엔진이나 데이터베이스에 사용되는 트리 구조를 탐색 트리라고 하는데,
이 탐색 트리는 매우 강력한 기능을 가진다. 
이에 대해서는 나중에 탐색 트리에 대해 배울 때 자세히 설명하겠다.

* 트리의 구성 요소
트리는 뿌리(Root), 가지(Branch), 잎(Leaf)로 이루어져 있다.
사실 뿌리, 가지, 잎은 모두 똑같은 노드이다.
트리에서 어디에 위치하는가에 따라 불리는 이름이 달라질 뿐이다.
뿌리는 트리 구조의 가장 위에 있는 노드를 가리키고,
가지는 뿌리와 잎 사이에 있는 모든 노드를 일컫는다.
그리고 가지의 끝에 매달린 노드를 잎이라고 칭한다.
잎 노드는 끝에 있다고 해서 단말(Terminal) 노드라고 부르기도 한다.

* 헤드와 테일을 모르면 링크드 리스트의 기본 연산을 이해할 수 없는 것처럼
트리의 구성 요소와 구성 요소 간의 관계를 모른다면 트리를 이해하기 어렵다.
그래서 지금부터 트리를 이루는 각 구성 요소의 명칭과 관계를 조금 더 익혀보겠다.

* 부모 : 하위 노드를 가지는 노드를 부모 노드라고 부르고,
부모 노드에 연결된 하위 노드들을 자식 노드라고 부른다.
또한 같은 부모 노드를 가진 자식 노드들을 형제 노드라고 칭한다.

* 경로 : 한 노드에서 다른 한 노드까지 이르는 길 사이에 있는
노드들의 순서를 일컬어 경로(Path)라고 부른다.
경로에는 길이(Length)라는 속성이 있다. 
길이는 출발 노드에서 목적 노드까지 거쳐야 하는 노드의 개수를 의미한다.

* 노드의 깊이 : 깊이(Depth)는 뿌리 노드에서 해당 노드까지 이르는 경로의 길이를 뜻한다.

* 레벨(Level) : 깊이가 같은 노드의 집합을 일컫는다.

* 높이(Height) : 가장 깊은 곳에 있는 잎 노드까지의 깊이를 의미한다.

* 차수(Degree) : 노드의 차수는 그 노드의 자식 노드 개수를 뜻하고,
트리의 차수는 트리 내에 있는 노드들 가운데 자식 노드가 가장 많은 노드의 차수를 말한다.

* 트리 표현 방법 : 트리는 다양한 방법으로 표현할 수 있는 ADT이다. 
일반적으로 나무를 거꾸로 뒤집어 놓은 그림이 많이 쓰이지만
이외에도 다양한 표현 방법이 있다.

* 중첩된 괄호 표현법 : 읽기는 다소 어렵지만 트리를 하나의 공식처럼 표현할 수 있는 것이 장점이다.
* 중첩된 집합 표현법 : 트리가 하위 트리의 집합이라는 사실을 잘 표현할 수 있다는 장점이 있다.
* 들여쓰기 : 자료의 계층적인 특징을 잘 나타낼 수 있다는 장점이 있다.

* 노드 표현 방법 : 노드 표현 방법은 부모와 자식, 형제 노드를 서로 연결 짓는
방법이라고 할 수 있다.
이러한 노드 표현 방법은 두 가지가 있다.

* N-Link 표현법 : N-Link는 노드의 차수가 N이라면 노드가 N개의 링크를 갖고 있는데
이 링크들이 각각 자식 노드를 가리키도록 노드를 구성하는 방법이다.
이러한 방법은 차수가 노드마다 달라지는 트리에는 적용이 힘들다는 단점이 있다.

* 왼쪽 자식-오른쪽 형제(Left Child-Right Sibling) 표현법 : 
이름 그대로 왼쪽 자식과 오른쪽 형제에 대한 포인터만을 갖도록 노드를 구성하는 방법이다.
이 표현법을 사용하면 N개의 차수를 가진 노드의 표현이 오로지 2개의 포인터(왼쪽 자신 포인터와 오른쪽 형제 포인터)
만으로 가능하게 된다.
이 표현법을 사용하는 트리에서 어느 한 노드의 모든 자식 노드를 얻으려면 일단
왼쪽 자식 노드에 대한 포인터만 있으면 된다.
해당 포인터를 이용해서 왼쪽 자식 노드의 주소를 얻은 후, 이 자식 노드의
오른쪽 형제 노드의 주소를 얻고, 그 다음 오른쪽 형제 노드의 주소를 계속해서 얻어나가면
결국에는 모든 자식 노드를 얻을 수 있게 된다.
N-Link 표현법에 비해 상당히 괜찮은 방법이라고 볼 수 있다.

* 트리의 기본 연산 : 처음으로 구현할 트리는 트리를 구축하는 과정에 
초점을 맞춘 것으로, 녿를 생성하고 부모와 자식 노드를 연결하는 코드가 구현의 대부분을 차지한다.

* 노드 선언 : 트리의 각 마디를 구성하는 노드의 선언부터 시작한다.
왼쪽 자식-오른쪽 형제 표현법의 노드 구조체는 데이터를 담는 Data 필드, 왼쪽 자식(Left Child)와 오른쪽 형제(Right Sibling)
을 가리키는 2개의 포인터로 구성된다.

* 자식 노드 연결 : 선언한 다음에는 자식노드를 연결하는 함수를 구현해야 한다.
이 함수는 부모 노드와 부모 노드에 연결할 자식 노드를 매개 변수로 받아야 한다.
이 함수는 먼저 부모 노드에게 자식 노드가 있는지 검사한다.
부모 노드에 몇 개의 자식 노드가 있는지 한 번에 알 수는 없지만, 일단 Left Child가 NULL이라는 것을 
확인하면 자식이 하나도 없다는 사실 정도는 알 수 있다. 
만약 부모 노드에게 자식 노드가 하나도 없다면 부모 노드의 Left Child 포인터에 자식 노드 주소를 바로 저장하면 된다.
만약 부모 노드의 Left Child가 NULL이 아니라면 적어도 하나의 자식 노드를 가진다는 뜻이다.
이럴 때는 자식 노드의 Right Sibling 포인터를 이용해서 가장 오른쪽에 있는 자식 노드(Right Sibling이 NULL인 노드)
를 찾아내고, 이렇게 찾아낸 가장 오른쪽 자식 노드의 Right Sibling에 Child를 대입한다.
이렇게하면 부모 노드는 새로운 자식 노드를 하나 더 연결하게 된다.
이런 식으로 자식 노드 연결을 통해 트리를 완성해나간다고 보면 된다.

* 트리 출력 : 트리를 만들기 위해 필요한 함수는 다 만들었다.
마지막으로 완성된 트리를 출력하는 함수를 구현하면 완성이다.
방금 전에 트리를 들여쓰기 표현법으로 나타낼 수 있다는 사실을 들었을 것이다.
이번에 구현할 출력 함수는 이러한 들여쓰기 형식으로 트리를 출력한다.
제일 앞에 나오는 for 루프가 매개 변수로 입력된 Depth-1만큼 공백을 3칸씩 출력한다.
공백 마지막에는 해당 노드가 누군가의 자식 노드임을 나타내는 +--를 덧붙인 후 노드의 데이터를 출력한다.
이렇게 하면 깊이가 0인 뿌리 노드는 제일 앞쪽에 출력되고 잎 노드는 제일 뒤쪽(깊은 곳)에 출력된다.

* 이진 트리(Binary Tree) : 이진 트리는 하나의 노드가 자식 노드를 2개까지만 가질 수 있는
트리 구조이다.
간단하게 생겼지만, 이를 이용한 알고리즘도 개발될만큼 활용성이 좋은 트리 구조이다.
그 예로 수식을 트리 형태로 표현하여 계산하게 하는 수식 이진 트리와
아주 빠른 데이터 검색을 가능하게 하는 이진 탐색 트리가 있다.

* 이진 트리의 종류 : 모든 이진 트리 노드의 자식 노드 수는 0, 1, 2 중 하나이다.
이 중에서 잎 노드를 제외한 모든 노드가 자식 노드를 2개씩 가진 트리 구조를 포화 이진 트리라고 부른다.
이러한 포화 이진 트리는 모든 잎 노드들이 같은 깊이에 위치한다는 특징을 가진다.

또한 포화 이진 트리가 완성되기 바로 전 단계의 트리 구조인 완전 이진 트리 구조도 있다.
완전 이진 트리 구조는 잎 노드들이 왼쪽부터 차례대로 채워진 것이 특징이다.
따라서 중간에 잎 노드가 빠져있는 이진 트리는 완전 이진 트리가 아니다.

* 이진 트리는 일반 트리처럼 나무 모양의 자료를 담기 위한 자료 구조가 아닌
컴파일러나 검색과 같은 알고리즘의 뼈대가 되는 특별한 자료 구조이다.
특히 이진 트리를 이용한 검색에서는 트리의 노드를 가능한 한 완전한 모습으로 유지해야 높은 성능을 낼 수 있다.
따라서 완전한 모습의 트리가 무엇인지 알고갈 필요가 있는 것이다.

* 이진 트리의 상태를 나타내는 용어 : 높이 균형 트리와 완전 높이 균형 트리리

* 높이 균형 트리 : 뿌리 노드를 기준으로 왼쪽 하위 트리와 오른쪽 하위 트리의 높이가
2 이상 차이 나지 않는 이진 트리를 일컫는다.

* 완전 높이 균형 트리 : 뿌리 노드를 기준으로 왼쪽 하위 트리와 오른쪽 하위 트리의 높이가
같은 이진 트리를 일컫는다.

* 이진 트리의 순회 : 순회는 간단히 말해 트리 안에서 노드 사이를 이동하는 연산이라고 할 수 있다.

* 트리에는 데이터 접근 순서로 분류한 몇 가지 순회 패턴이 존재한다.

* 전위 순회 : 뿌리 노드부터 잎 노드까지 아래 방향으로 방문하는 순회 방법
* 중위 순회 : 왼쪽 하위 트리부터 오른쪽 하위 트리 방향으로 방문하는 순회 방법
* 후위 순회 : 뿌리 -> 왼쪽 하위 트리 -> 오른쪽 하위 트리 순으로 순회하는 방법


